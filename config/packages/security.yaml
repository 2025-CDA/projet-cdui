# config/packages/security.yaml
security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User: 'auto'

    providers:

#        users:
#            entity:
#                class: App\Entity\User
#                property: email

        app_user_provider:
            entity:
                class: App\Entity\User
                property: email


    firewalls:
        dev:
            pattern: ^/_(profiler|wdt)
            security: false
        main:
            stateless: true
            provider: app_user_provider
            json_login:
                check_path: /auth
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~

        # Your existing API firewall, now responsible for validating the JWT on all other API routes.
        api:
            pattern:   ^/api
            stateless: true
            jwt: ~

        # Your existing firewall for the main website (if you have one).
        # This should come last as it has a broad pattern.
#        main:
#            lazy: true
#            provider: app_user_provider
#            form_login:
#                login_path: app_login
#                check_path: app_login
#                enable_csrf: true
#            logout:
#                path: app_logout

    # Access control rules are also crucial.
    access_control:
        # 1. The login route MUST be public
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
#
#        # 2. The API documentation entry point MUST be public
        - { path: ^/api, roles: PUBLIC_ACCESS } # The '$' means it matches '/api' exactly
#
#        # 3. The documentation assets (schemas, etc.) MUST be public
#        - { path: ^/api/docs, roles: PUBLIC_ACCESS }
#
#        # 4. EVERYTHING ELSE under /api is secured and requires a valid token
#        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }



when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
