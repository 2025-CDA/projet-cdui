# config/packages/security.yaml
security:
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User: 'auto'

    providers:

#        users:
#            entity:
#                class: App\Entity\User
#                property: email

        app_user_provider:
            entity:
                class: App\Entity\User
                # property: email
    firewalls:
        dev:
            pattern: ^/_(profiler|wdt)
            security: false

        main:
            pattern: ^/api #non présent sur dev branch
            stateless: true
            json_login:
              # check_path: /auth #présent sur dev branch
                check_path: /api/login_check        # Route exposée pour la connexion
                username_path: email                # Chemin dans le JSON pour le nom d'utilisateur/email
                password_path: password             # Chemin dans le JSON pour le mot de passe
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            stateless: true # <-- This is the setting causing the error if a session is used
            jwt: ~



    # Access control rules are also crucial.
    access_control:
        # 1. The login route MUST be public
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
#
#        # 2. The API documentation entry point MUST be public
        - { path: ^/api, roles: PUBLIC_ACCESS } # The '$' means it matches '/api' exactly
#
#        # 3. The documentation assets (schemas, etc.) MUST be public
#        - { path: ^/api/docs, roles: PUBLIC_ACCESS }
#
#        # 4. EVERYTHING ELSE under /api is secured and requires a valid token
#        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        # - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }



when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
